import { Request } from 'express';
import { UserService } from './user.service';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
export declare class UserController {
    private readonly usersService;
    constructor(usersService: UserService);
    create(createUserDto: CreateUserDto): Promise<{
        id: string;
        login: string;
        email: string;
        password: string;
        name: string;
        kind: string;
        avatar: string;
        bg_color: string[];
        paddle_color: string;
        ball_color: string;
        status: string;
        TotalWin: number;
        TotalLose: number;
        TotalDraw: number;
        cleanSheet: boolean;
        Machine: boolean;
        TotalMatch: number;
        Level: number;
        location: string;
        intraId: number;
        banner: string;
        is_active: boolean;
        created_at: Date;
        updated_at: Date;
        twoFactorAuthenticationSecret: string;
        twoFA: boolean;
        logedFirstTime: boolean;
    }>;
    findAll(): Promise<{
        id: string;
        login: string;
        email: string;
        password: string;
        name: string;
        kind: string;
        avatar: string;
        bg_color: string[];
        paddle_color: string;
        ball_color: string;
        status: string;
        TotalWin: number;
        TotalLose: number;
        TotalDraw: number;
        cleanSheet: boolean;
        Machine: boolean;
        TotalMatch: number;
        Level: number;
        location: string;
        intraId: number;
        banner: string;
        is_active: boolean;
        created_at: Date;
        updated_at: Date;
        twoFactorAuthenticationSecret: string;
        twoFA: boolean;
        logedFirstTime: boolean;
    }[]>;
    getLoginUser(request: Request): any;
    findOne(id: string): Promise<any>;
    update(id: string, data: UpdateUserDto): Promise<{
        id: string;
        login: string;
        email: string;
        password: string;
        name: string;
        kind: string;
        avatar: string;
        bg_color: string[];
        paddle_color: string;
        ball_color: string;
        status: string;
        TotalWin: number;
        TotalLose: number;
        TotalDraw: number;
        cleanSheet: boolean;
        Machine: boolean;
        TotalMatch: number;
        Level: number;
        location: string;
        intraId: number;
        banner: string;
        is_active: boolean;
        created_at: Date;
        updated_at: Date;
        twoFactorAuthenticationSecret: string;
        twoFA: boolean;
        logedFirstTime: boolean;
    }>;
    remove(id: string): Promise<{
        id: string;
        login: string;
        email: string;
        password: string;
        name: string;
        kind: string;
        avatar: string;
        bg_color: string[];
        paddle_color: string;
        ball_color: string;
        status: string;
        TotalWin: number;
        TotalLose: number;
        TotalDraw: number;
        cleanSheet: boolean;
        Machine: boolean;
        TotalMatch: number;
        Level: number;
        location: string;
        intraId: number;
        banner: string;
        is_active: boolean;
        created_at: Date;
        updated_at: Date;
        twoFactorAuthenticationSecret: string;
        twoFA: boolean;
        logedFirstTime: boolean;
    }>;
}
